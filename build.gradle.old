/* needed for apply plugin: 'org.springframework.boot' */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE")
    }
}


group 'io.veredictum'
version '0.1.0'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
//apply plugin: 'gradle-one-jar'

/* these variables set after java plugin is applied */
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
}

/*
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}
*/



repositories {
    mavenCentral()
}

dependencies {
    compile (
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.kafka:spring-kafka:1.2.2.RELEASE",
            "org.web3j:core:2.3.0"
    )
 
    testCompile (
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.kafka:spring-kafka-test:1.2.2.RELEASE',
            'org.junit.jupiter:junit-jupiter-engine:5.0.0-RC2'
    )
}


/*
jar {
    manifest.attributes(
            "Main-Class": "io.veredictum.registrar.Application",
            "Class-Path": "org/springframework/boot/spring-boot/1.5.1.RELEASE/1.5.1.RELEASE.jar"
    )
}

jar {
    doFirst {
        manifest {
            if (!configurations.compile.isEmpty()) {
                attributes(
                        'Class-Path': configurations.compile.collect{it.toURI().toString()}.join(' '),
                        'Main-Class': 'com.example.Main')
            }
        }
    }
}



task buildOneJar(type: OneJar) {
    mainClass = 'home.ramboze.dev.veredictum.registrar-api.io.veredictum.registrar'
}
*/





/* Solidity Build Section */

task deleteSolCompiled(type: Delete) {
    delete 'solCompiled'
}

task compileSol {
    doLast {
        mkdir 'solCompiled'
        exec {
            executable 'solc'
            args 'src/main/sol/ContentAssetRegistrar.sol', '--bin', '--abi', '--optimize', '-o', 'solCompiled'
        }
    }
}

task generateSolWrapper {
    doLast{
        exec {
            executable 'web3j'
            args 'solidity', 'generate', 'solCompiled/ContentAssetRegistrar.bin', 'solCompiled/ContentAssetRegistrar.abi', '-o', 'src/main/java', '-p', 'io.veredictum.generated'
        }
    }
}

generateSolWrapper.dependsOn compileSol
compileSol.dependsOn deleteSolCompiled
